- name: "Collect source device information about {{ mount }} mount"
  ansible.builtin.shell:
    cmd: findmnt -o SOURCE '{{ mount }}' | tail -n1
  register: source
  failed_when: source.rc > 1
  changed_when: false

- name: "Collect fstype information about {{ mount }} mount"
  ansible.builtin.shell:
    #cmd: findmnt '{{ mount }}' | tail -n1 | awk '{ print $3 }'
    cmd: findmnt -o FSTYPE '{{ mount }}' | tail -n1
  register: fstype
  failed_when: fstype.rc > 1
  changed_when: false

- name: "Collect mount options information about {{ mount }} mount"
  ansible.builtin.shell:
    cmd: findmnt -s -o OPTIONS '{{ mount }}' | tail -n1
  register: mount_options
  failed_when: mount_options.rc > 1
  changed_when: false

- name: "Set mount_options fact"
  ansible.builtin.set_fact:
    mount_options: "{{ mount_options.stdout }}"

- name: "Remove 'defaults' mount options from mount_options var"
  ansible.builtin.set_fact:
    mount_options: "{{ mount_options | replace('defaults','') }}"
  when: "'defaults' in mount_options"

- name: "Remove beginning comma from mount_options var"
  ansible.builtin.set_fact:
    mount_options: "{{ mount_options | replace(',','',1) }}"
  when: mount_options.startswith(',')

- name: "Add specified mount option {{ option }} to {{ mount }}, when mount_options is blank"
  ansible.posix.mount:
    path: "{{ mount }}"
    src: "{{ source.stdout }}"
    fstype: "{{ fstype.stdout }}"
    opts: "{{ option }}"
    state: present
  when:
    - "option not in mount_options"
    - mount_options == ""

- name: "Add specified mount option {{ option }} to {{ mount }}, when mount_options is not blank"
  ansible.posix.mount:
    path: "{{ mount }}"
    src: "{{ source.stdout }}"
    fstype: "{{ fstype.stdout }}"
    opts: "{{ mount_options }},{{ option }}"
    state: present
  when:
    - "option not in mount_options"
    - mount_options != ""